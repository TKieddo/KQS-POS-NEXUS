import * as React from 'react'
import { Plus, Trash2, Edit3, Image as ImageIcon, Copy, X, Tag } from 'lucide-react'
import { cn } from '@/lib/utils'
import { PremiumButton } from '@/components/ui/premium-button'
import { PremiumInput } from '@/components/ui/premium-input'
import { Modal } from '@/components/ui/modal'
import { ProductImageGallery } from './ProductImageGallery'
import { uploadProductImage } from '@/lib/supabase'
import type { VariantOption } from '@/lib/variant-services'

export interface ProductVariant {
  id: string
  sku: string
  barcode: string
  price: number
  cost: number
  stock_quantity: number
  image_url?: string
  is_active: boolean
  options: {
    size?: string
    color?: string
    gender?: string
    brand?: string
    [key: string]: string | undefined
  }
}

export interface VariantManagerProps {
  variants: ProductVariant[]
  onVariantsChange: (variants: ProductVariant[]) => void
  baseSku: string
  basePrice: number
  baseCost: number
  availableOptions: {
    size: VariantOption[]
    color: VariantOption[]
    gender: VariantOption[]
    brand: VariantOption[]
  }
  onAddNewOption?: (value: string, type: string) => Promise<boolean>
  className?: string
}

const VariantManager = ({
  variants,
  onVariantsChange,
  baseSku,
  basePrice,
  baseCost,
  availableOptions,
  onAddNewOption,
  className
}: VariantManagerProps) => {
  const [isAddVariantModalOpen, setIsAddVariantModalOpen] = React.useState(false)
  const [isEditVariantModalOpen, setIsEditVariantModalOpen] = React.useState(false)
  const [selectedVariant, setSelectedVariant] = React.useState<ProductVariant | null>(null)
  const [newVariant, setNewVariant] = React.useState<Partial<ProductVariant>>({
    sku: baseSku,
    price: basePrice,
    cost: baseCost,
    stock_quantity: 0,
    is_active: true,
    options: {}
  })
  
  // Track if user has manually modified the SKU
  const [isSkuManuallyModified, setIsSkuManuallyModified] = React.useState(false)

  // Image management state
  const [variantImages, setVariantImages] = React.useState<{ file?: File; url: string; isExisting?: boolean }[]>([])
  const [mainVariantImage, setMainVariantImage] = React.useState<string | null>(null)

  // Update variant pricing and SKU when base values change
  React.useEffect(() => {
    setNewVariant(prev => ({
      ...prev,
      sku: baseSku,
      price: basePrice,
      cost: baseCost
    }))
    setIsSkuManuallyModified(false)
  }, [basePrice, baseCost, baseSku])

  // Auto-update SKU when variant options change (unless manually modified)
  React.useEffect(() => {
    if (!isSkuManuallyModified && newVariant.options) {
      const autoGeneratedSku = generateSku(newVariant.options)
      setNewVariant(prev => ({
        ...prev,
        sku: autoGeneratedSku
      }))
    }
  }, [newVariant.options, isSkuManuallyModified, baseSku])

  const generateBarcode = (input: string): string => {
    let hash = 0
    for (let i = 0; i < input.length; i++) {
      hash = ((hash << 5) - hash) + input.charCodeAt(i)
      hash |= 0
    }
    return Math.abs(hash).toString().padStart(12, '0').slice(0, 12)
  }

  const generateSku = (options: ProductVariant['options']): string => {
    const parts = [baseSku]
    if (options.size) parts.push(options.size)
    if (options.color) parts.push(options.color)
    if (options.gender) parts.push(options.gender)
    if (options.brand) parts.push(options.brand)
    return parts.join('-').replace(/-+/g, '-').replace(/^-|-$/g, '')
  }

  const handleAddVariant = async () => {
    if (!newVariant.options || Object.keys(newVariant.options).length === 0) {
      alert('Please add at least one option to the variant')
      return
    }

    // Use the SKU from the form (either auto-generated or manually entered)
    const sku = newVariant.sku || generateSku(newVariant.options)
    
    // Check if variant with same SKU already exists
    const existingVariant = variants.find(v => v.sku === sku)

    if (existingVariant) {
      alert('A variant with this SKU already exists')
      return
    }

    try {
      const imageUrl = await handleImageUpload()

      const variant: ProductVariant = {
        id: Date.now().toString(),
        sku,
        barcode: generateBarcode(sku),
        price: newVariant.price || basePrice,
        cost: newVariant.cost || baseCost,
        stock_quantity: newVariant.stock_quantity || 0,
        image_url: imageUrl,
        is_active: newVariant.is_active ?? true,
        options: newVariant.options
      }

      onVariantsChange([...variants, variant])
      resetVariantForm()
    } catch (error) {
      console.error('Error adding variant:', error)
      alert('Failed to upload variant image. Please try again.')
    }
  }

  const handleEditVariant = async () => {
    if (!selectedVariant) return

    // Check if SKU has changed and if the new SKU conflicts with existing variants
    const newSku = newVariant.sku || selectedVariant.sku
    if (newSku !== selectedVariant.sku) {
      const existingVariant = variants.find(v => v.id !== selectedVariant.id && v.sku === newSku)
      if (existingVariant) {
        alert('A variant with this SKU already exists')
        return
      }
    }

    try {
      const updatedVariant = {
        ...selectedVariant,
        sku: newSku,
        barcode: newSku !== selectedVariant.sku ? generateBarcode(newSku) : selectedVariant.barcode,
        price: newVariant.price || selectedVariant.price,
        cost: newVariant.cost || selectedVariant.cost,
        stock_quantity: newVariant.stock_quantity ?? selectedVariant.stock_quantity,
        image_url: await handleImageUpload() || selectedVariant.image_url,
        is_active: newVariant.is_active ?? selectedVariant.is_active,
        options: newVariant.options || selectedVariant.options
      }

      onVariantsChange(
        variants.map(v => v.id === selectedVariant.id ? updatedVariant : v)
      )
      resetVariantForm()
    } catch (error) {
      console.error('Error updating variant:', error)
      alert('Failed to upload variant image. Please try again.')
    }
  }

  const handleDeleteVariant = (variantId: string) => {
    if (confirm('Are you sure you want to delete this variant?')) {
      onVariantsChange(variants.filter(v => v.id !== variantId))
    }
  }

  const handleCopyBarcode = (barcode: string) => {
    navigator.clipboard.writeText(barcode)
    // You could add a toast notification here
  }

  const getVariantLabel = (variant: ProductVariant) => {
    const parts = []
    if (variant.options.size) parts.push(variant.options.size)
    if (variant.options.color) parts.push(variant.options.color)
    if (variant.options.gender) parts.push(variant.options.gender)
    if (variant.options.brand) parts.push(variant.options.brand)
    return parts.length > 0 ? parts.join(' - ') : 'Default'
  }

  const getVariantPillColor = (variant: ProductVariant) => {
    if (variant.options.size && variant.options.color) return 'bg-purple-100 border-purple-300 text-purple-700'
    if (variant.options.size) return 'bg-green-100 border-green-300 text-green-700'
    if (variant.options.color) return 'bg-blue-100 border-blue-300 text-blue-700'
    if (variant.options.brand) return 'bg-orange-100 border-orange-300 text-orange-700'
    return 'bg-gray-100 border-gray-300 text-gray-700'
  }

  const openEditModal = (variant: ProductVariant) => {
    setSelectedVariant(variant)
    setNewVariant({
      sku: variant.sku,
      price: variant.price,
      cost: variant.cost,
      stock_quantity: variant.stock_quantity,
      image_url: variant.image_url,
      is_active: variant.is_active,
      options: { ...variant.options }
    })

    // Load existing variant images
    if (variant.image_url) {
      setVariantImages([{ url: variant.image_url, isExisting: true }])
      setMainVariantImage(variant.image_url)
    } else {
      setVariantImages([])
      setMainVariantImage(null)
    }

    setIsSkuManuallyModified(true) // Since it's an existing variant, consider SKU as manually set
    setIsEditVariantModalOpen(true)
  }

  const addOptionToVariant = (optionType: string, optionValue: string) => {
    setNewVariant(prev => ({
      ...prev,
      options: {
        ...prev.options,
        [optionType]: optionValue
      }
    }))
  }

  const removeOptionFromVariant = (optionType: string) => {
    setNewVariant(prev => ({
      ...prev,
      options: {
        ...prev.options,
        [optionType]: undefined
      }
    }))
  }

  // Image handlers
  const handleAddVariantImages = (files: FileList | null) => {
    if (files) {
      const newImages = Array.from(files).map(file => ({ file, url: URL.createObjectURL(file) }))
      setVariantImages(prev => [...prev, ...newImages])
      if (!mainVariantImage && newImages.length > 0) setMainVariantImage(newImages[0].url)
    }
  }

  const handleRemoveVariantImage = (url: string) => {
    setVariantImages(prev => prev.filter(img => img.url !== url))
    if (mainVariantImage === url) {
      const remaining = variantImages.filter(img => img.url !== url)
      setMainVariantImage(remaining.length > 0 ? remaining[0].url : null)
    }
  }

  const handleMainVariantImageSelect = (url: string) => {
    setMainVariantImage(url)
  }

  const handleImageUpload = async (): Promise<string | undefined> => {
    if (variantImages.length > 0 && mainVariantImage) {
      const mainImageData = variantImages.find(img => img.url === mainVariantImage)
      if (mainImageData?.file) {
        return (await uploadProductImage(mainImageData.file)) || undefined
      } else if (mainImageData?.isExisting) {
        return mainImageData.url
      }
    }
    return undefined
  }

  const resetVariantForm = () => {
    setIsAddVariantModalOpen(false)
    setIsEditVariantModalOpen(false)
    setSelectedVariant(null)
    setNewVariant({
      sku: baseSku,
      price: basePrice,
      cost: baseCost,
      stock_quantity: 0,
      is_active: true,
      options: {}
    })
    setVariantImages([])
    setMainVariantImage(null)
    setIsSkuManuallyModified(false)
  }

  const openAddVariantModal = () => {
    // Reset all form state first
    setSelectedVariant(null)
    setNewVariant({
      sku: baseSku,
      price: basePrice,
      cost: baseCost,
      stock_quantity: 0,
      is_active: true,
      options: {}
    })
    setVariantImages([])
    setMainVariantImage(null)
    setIsSkuManuallyModified(false)
    // Then open the modal
    setIsAddVariantModalOpen(true)
  }



  const VariantModal = ({ isOpen, onClose, title, onSubmit, isEdit = false }: {
    isOpen: boolean
    onClose: () => void
    title: string
    onSubmit: () => void
    isEdit?: boolean
  }) => (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={title}
      maxWidth="7xl"
      className="bg-white/95 rounded-3xl shadow-2xl border border-gray-100/60 backdrop-blur-xl max-h-[95vh] overflow-hidden"
    >
      <div className="px-4 py-6 space-y-4 max-h-[calc(95vh-140px)] overflow-y-auto bg-[#f8fafc]">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left/Main Column */}
          <div className="lg:col-span-2 flex flex-col gap-4">
            {/* Variant Options Card */}
            <div className="bg-white rounded-2xl shadow-md p-4">
              <h3 className="text-base font-semibold mb-3 flex items-center gap-2">
                <Tag className="h-4 w-4 text-blue-600" />
                Variant Options
              </h3>
              
              <div className="space-y-4">
                {/* Size Options */}
                {availableOptions.size.length > 0 && (
                  <div className="space-y-2">
                    <label className="block text-xs font-medium text-gray-700">Size</label>
                    <div className="flex flex-wrap gap-2">
                      {availableOptions.size.map(option => (
                        <button
                          key={option.value}
                          type="button"
                          onClick={() => addOptionToVariant('size', option.value)}
                          className={cn(
                            "px-3 py-1 rounded-full border text-xs font-medium transition-all",
                            newVariant.options?.size === option.value
                              ? "bg-green-100 border-green-400 text-green-700"
                              : "bg-white border-gray-300 text-gray-700 hover:bg-gray-100"
                          )}
                        >
                          {option.label}
                        </button>
                      ))}
                      {newVariant.options?.size && (
                        <button
                          type="button"
                          onClick={() => removeOptionFromVariant('size')}
                          className="px-2 py-1 text-red-600 hover:text-red-800"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      )}
                    </div>
                  </div>
                )}

                {/* Color Options */}
                {availableOptions.color.length > 0 && (
                  <div className="space-y-2">
                    <label className="block text-xs font-medium text-gray-700">Color</label>
                    <div className="flex flex-wrap gap-2">
                      {availableOptions.color.map(option => (
                        <button
                          key={option.value}
                          type="button"
                          onClick={() => addOptionToVariant('color', option.value)}
                          className={cn(
                            "px-3 py-1 rounded-full border text-xs font-medium transition-all",
                            newVariant.options?.color === option.value
                              ? "bg-purple-100 border-purple-400 text-purple-700"
                              : "bg-white border-gray-300 text-gray-700 hover:bg-gray-100"
                          )}
                        >
                          {option.label}
                        </button>
                      ))}
                      {newVariant.options?.color && (
                        <button
                          type="button"
                          onClick={() => removeOptionFromVariant('color')}
                          className="px-2 py-1 text-red-600 hover:text-red-800"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      )}
                    </div>
                  </div>
                )}

                {/* Gender Options */}
                {availableOptions.gender.length > 0 && (
                  <div className="space-y-2">
                    <label className="block text-xs font-medium text-gray-700">Gender</label>
                    <div className="flex flex-wrap gap-2">
                      {availableOptions.gender.map(option => (
                        <button
                          key={option.value}
                          type="button"
                          onClick={() => addOptionToVariant('gender', option.value)}
                          className={cn(
                            "px-3 py-1 rounded-full border text-xs font-medium transition-all",
                            newVariant.options?.gender === option.value
                              ? "bg-blue-100 border-blue-400 text-blue-700"
                              : "bg-white border-gray-300 text-gray-700 hover:bg-gray-100"
                          )}
                        >
                          {option.label}
                        </button>
                      ))}
                      {newVariant.options?.gender && (
                        <button
                          type="button"
                          onClick={() => removeOptionFromVariant('gender')}
                          className="px-2 py-1 text-red-600 hover:text-red-800"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      )}
                    </div>
                  </div>
                )}

                {/* Brand Options */}
                {availableOptions.brand.length > 0 && (
                  <div className="space-y-2">
                    <label className="block text-xs font-medium text-gray-700">Brand</label>
                    <div className="flex flex-wrap gap-2">
                      {availableOptions.brand.map(option => (
                        <button
                          key={option.value}
                          type="button"
                          onClick={() => addOptionToVariant('brand', option.value)}
                          className={cn(
                            "px-3 py-1 rounded-full border text-xs font-medium transition-all",
                            newVariant.options?.brand === option.value
                              ? "bg-orange-100 border-orange-400 text-orange-700"
                              : "bg-white border-gray-300 text-gray-700 hover:bg-gray-100"
                          )}
                        >
                          {option.label}
                        </button>
                      ))}
                      {newVariant.options?.brand && (
                        <button
                          type="button"
                          onClick={() => removeOptionFromVariant('brand')}
                          className="px-2 py-1 text-red-600 hover:text-red-800"
                        >
                          <X className="h-3 w-3" />
                        </button>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Variant Details Card */}
            <div className="bg-white rounded-2xl shadow-md p-4">
              <h3 className="text-base font-semibold mb-3">Variant Details</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div className="md:col-span-2">
                  <label className="block text-xs font-medium text-gray-600 mb-1">
                    SKU 
                    {!isSkuManuallyModified && (
                      <span className="text-xs text-green-600 ml-1">(Auto-generated)</span>
                    )}
                  </label>
                  <PremiumInput
                    value={newVariant.sku || ''}
                    onChange={(e) => {
                      setNewVariant(prev => ({ ...prev, sku: e.target.value }))
                      setIsSkuManuallyModified(true)
                    }}
                    placeholder="Enter SKU or leave auto-generated"
                    className="w-full h-9 text-sm"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Will auto-update based on variant options unless manually changed
                  </p>
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">Price</label>
                  <PremiumInput
                    type="number"
                    value={newVariant.price || 0}
                    onChange={(e) => setNewVariant(prev => ({ ...prev, price: parseFloat(e.target.value) || 0 }))}
                    placeholder="0.00"
                    className="w-full h-9 text-sm"
                    min="0"
                    step="0.01"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">Cost</label>
                  <PremiumInput
                    type="number"
                    value={newVariant.cost || 0}
                    onChange={(e) => setNewVariant(prev => ({ ...prev, cost: parseFloat(e.target.value) || 0 }))}
                    placeholder="0.00"
                    className="w-full h-9 text-sm"
                    min="0"
                    step="0.01"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">Stock Quantity</label>
                  <PremiumInput
                    type="number"
                    value={newVariant.stock_quantity || 0}
                    onChange={(e) => setNewVariant(prev => ({ ...prev, stock_quantity: parseInt(e.target.value) || 0 }))}
                    placeholder="0"
                    className="w-full h-9 text-sm"
                    min="0"
                  />
                </div>
                <div>
                  <label className="block text-xs font-medium text-gray-600 mb-1">Image URL (Optional)</label>
                  <PremiumInput
                    value={newVariant.image_url || ''}
                    onChange={(e) => setNewVariant(prev => ({ ...prev, image_url: e.target.value }))}
                    placeholder="https://example.com/image.jpg"
                    className="w-full h-9 text-sm"
                  />
                </div>
              </div>

              {/* Active Status */}
              <div className="mt-4 flex items-center gap-2">
                <input
                  type="checkbox"
                  id="variantActive"
                  checked={newVariant.is_active ?? true}
                  onChange={(e) => setNewVariant(prev => ({ ...prev, is_active: e.target.checked }))}
                  className="rounded"
                />
                <label htmlFor="variantActive" className="text-sm text-gray-700">
                  Active
                </label>
              </div>
            </div>
          </div>

          {/* Right Column: Image Upload & Actions */}
          <div className="flex flex-col gap-4">
            {/* Variant Image Upload */}
            <div className="bg-white rounded-2xl shadow-md p-4">
              <h3 className="text-base font-semibold mb-3 flex items-center gap-2">
                <ImageIcon className="h-4 w-4 text-purple-600" />
                Variant Image
              </h3>
              <ProductImageGallery
                images={variantImages.map(img => img.url)}
                mainImage={mainVariantImage}
                onMainImageSelect={handleMainVariantImageSelect}
                onRemoveImage={handleRemoveVariantImage}
                onAddImages={handleAddVariantImages}
              />
              {variantImages.length === 0 && (
                <div className="text-center py-4 text-gray-500 text-sm">
                  No image selected. Add an image to differentiate this variant.
                </div>
              )}
            </div>

            {/* Actions */}
            <div className="bg-white rounded-2xl shadow-md p-4">
              <h3 className="text-base font-semibold mb-3">Actions</h3>
              <div className="space-y-3">
                <PremiumButton
                  onClick={onSubmit}
                  disabled={!newVariant.options || Object.keys(newVariant.options).length === 0}
                  className="w-full"
                  gradient="green"
                >
                  {isEdit ? 'Update Variant' : 'Add Variant'}
                </PremiumButton>
                <PremiumButton
                  variant="outline"
                  onClick={onClose}
                  className="w-full"
                >
                  Cancel
                </PremiumButton>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Modal>
  )

  return (
    <div className={cn("space-y-4", className)}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h4 className="text-sm font-semibold text-gray-900">Product Variants</h4>
          <p className="text-xs text-gray-600 mt-1">
            {variants.length} variant{variants.length !== 1 ? 's' : ''} • Total Stock: {variants.reduce((sum, v) => sum + v.stock_quantity, 0)}
          </p>
        </div>
        <PremiumButton
          onClick={openAddVariantModal}
          size="sm"
          className="rounded-full px-4 py-2 text-sm font-semibold"
        >
          <Plus className="h-4 w-4 mr-2" />
          Add Variant
        </PremiumButton>
      </div>

      {/* Variants List */}
      {variants.length > 0 ? (
        <div className="space-y-3">
          {variants.map((variant) => (
            <div
              key={variant.id}
              className={cn(
                "flex items-center justify-between p-4 rounded-xl border bg-white shadow-sm",
                getVariantPillColor(variant)
              )}
            >
              <div className="flex items-center gap-4 flex-1">
                {/* Variant Image */}
                {variant.image_url && (
                  <img
                    src={variant.image_url}
                    alt={getVariantLabel(variant)}
                    className="w-12 h-12 object-cover rounded-lg border"
                  />
                )}
                
                {/* Variant Info */}
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-1">
                    <h5 className="text-sm font-semibold text-gray-900">
                      {getVariantLabel(variant)}
                    </h5>
                    <span className={cn(
                      "px-2 py-0.5 rounded-full text-xs font-semibold",
                      variant.is_active 
                        ? "bg-green-100 text-green-700" 
                        : "bg-red-100 text-red-700"
                    )}>
                      {variant.is_active ? 'Active' : 'Inactive'}
                    </span>
                  </div>
                  
                  <div className="flex items-center gap-4 text-xs text-gray-600">
                    <span>SKU: {variant.sku}</span>
                    <span>Price: ${variant.price.toFixed(2)}</span>
                    <span>Stock: {variant.stock_quantity}</span>
                    <span>Cost: ${variant.cost.toFixed(2)}</span>
                  </div>
                </div>
              </div>

              {/* Actions */}
              <div className="flex items-center gap-2">
                <button
                  onClick={() => handleCopyBarcode(variant.barcode)}
                  className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
                  title="Copy Barcode"
                >
                  <Copy className="h-4 w-4" />
                </button>
                <button
                  onClick={() => openEditModal(variant)}
                  className="p-2 text-blue-600 hover:text-blue-800 transition-colors"
                  title="Edit Variant"
                >
                  <Edit3 className="h-4 w-4" />
                </button>
                <button
                  onClick={() => handleDeleteVariant(variant.id)}
                  className="p-2 text-red-600 hover:text-red-800 transition-colors"
                  title="Delete Variant"
                >
                  <Trash2 className="h-4 w-4" />
                </button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-12 bg-gray-50 rounded-xl border-2 border-dashed border-gray-300">
          <ImageIcon className="h-12 w-12 mx-auto text-gray-400 mb-4" />
          <h5 className="text-sm font-medium text-gray-900 mb-2">No variants yet</h5>
          <p className="text-xs text-gray-600 mb-4">
            Add variants to create different options for your product
          </p>
          <PremiumButton
            onClick={openAddVariantModal}
            size="sm"
            variant="outline"
          >
            <Plus className="h-4 w-4 mr-2" />
            Add Your First Variant
          </PremiumButton>
        </div>
      )}

      {/* Add Variant Modal */}
      <VariantModal
        isOpen={isAddVariantModalOpen}
        onClose={resetVariantForm}
        title="Add New Variant"
        onSubmit={handleAddVariant}
      />

      {/* Edit Variant Modal */}
      <VariantModal
        isOpen={isEditVariantModalOpen}
        onClose={resetVariantForm}
        title="Edit Variant"
        onSubmit={handleEditVariant}
        isEdit={true}
      />
    </div>
  )
}

VariantManager.displayName = "VariantManager"

export { VariantManager } 